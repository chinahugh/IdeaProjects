package com.zjkjsoft.controller;

import java.awt.Font;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import com.jfinal.aop.Before;
import com.jfinal.ext.render.excel.PoiRender;
import com.jfinal.plugin.activerecord.Page;
import com.zjkjsoft.interceptor.ManagerPowerInterceptor;
import com.zjkjsoft.model.BarcodeConf;
import com.zjkjsoft.model.JcxxIndent;
import com.zjkjsoft.model.Material;
import com.zjkjsoft.util.BarcodeUtil;

/**
 * BarcodeController 条码管理
 */

@Before(ManagerPowerInterceptor.class)
public class BarcodeController extends BaseController {
	private static String path = "/tmgl/barcode4/";// jsp路径
	// navTabId
	private static String navTabId = "barcode4";
	private static String key = "mc";// 查询关键字字段名

	@Override
	public String action() {
		return "条码管理";
	}

	/**
	 * 条码管理首页 <br/>
	 * 页面：/xtgl/role/list.jsp
	 */
	@Override
	public void index() {
		setAttr("page", getPageData());
		render(path + "list.jsp");
	}

	/**
	 * 模糊查询
	 */
	public void list() {
		setAttr("page", getPageData());
		render(path + "list.jsp");
	}

	private Page<JcxxIndent> getPageData() {
		String sql = "from jcxxindent where 1=1 ";
		String wlms = getPara("wlms");
		if (wlms != null && !"".equals(wlms))
			sql += " and wlms like '%" + wlms + "%' ";
		String dd = getPara("dd");
		if (dd != null && !"".equals(dd))
			sql += " and dd like '%" + dd + "%' ";
		String mrpkzz = getPara("mrpkzz");
		if (mrpkzz != null && !"".equals(mrpkzz))
			sql += " and mrpkzz like '%" + mrpkzz + "%' ";
		String status = getPara("status1");
		if (status != null && !"".equals(status))
			sql += " and status like '%" + status + "%' ";
		return JcxxIndent.dao.paginate(getParaToInt("pageNum", 1), getParaToInt("numPerPage", 20), " select * ",
				sql + " order by id desc ");
	}

	/**
	 * 查看 <br/>
	 * 页面：/jcxx/indent/view.jsp
	 */
	public void view() {
		setAttr("jcxxindent", JcxxIndent.dao.findById(getParaToInt()));
		render(path + "view.jsp");
	}

	/**
	 * 添加订单 <br/>
	 * 页面：/jcxx/indent/add.jsp
	 */
	public void add() {
		redirect(path + "add.jsp");
	}

	/**
	 * 保存数据到数据库
	 */
	public void save() {

		try {
			JcxxIndent m = getModel(JcxxIndent.class);
			if (m.get("id") != null) {
				m.update();
				toDwzJson(200, "修改操作成功", navTabId, "", "closeCurrent");
			} else {
				// m.set("id", "js_seq.nextval");
				m.save();
				toDwzJson(200, "新增操作成功", navTabId, "", "closeCurrent");
			}
			// toDwzJson(200,"操作成功",navTabId,"","closeCurrent");
		} catch (Exception e) {
			toDwzJson(300, "保存异常！", navTabId);
		}
	}

	/**
	 * 订单的修改 编辑 <br/>
	 * 页面：/scxx/indent/add.jsp
	 */
	public void edit() {
		setAttr("jcxxindent", JcxxIndent.dao.findById(getParaToInt()));
		render(path + "add.jsp");
	}
	
	/**
	 * 打印
	 */
	public void printTest() {
		String dd=getPara("id");
		int whide=Integer.parseInt(getPara("whide"));
		int height=Integer.parseInt(getPara("height"));
		String tmfs=getPara("cpjcjd.mc");
		BarcodeConf barcodeConf=BarcodeConf.dao.findFirst("select * from barcodeconf where mc=?",tmfs);//获取打印方式信息
		String tmsg=getZd(barcodeConf,"t1","t1s","t1c");
		String bmsg1 =getZd(barcodeConf,"d1","d1s","d1c");
		if(bmsg1==null) {
			bmsg1="";
		}
		String bmsg2 =getZd(barcodeConf,"d2","d2s","d2c");
		if(bmsg2==null) {
			bmsg2="";
		}
		String bmsg3 =getZd(barcodeConf,"d3","d3s","d3c");
		if(bmsg3==null) {
			bmsg3="";
		}
		String bmsg4 =getZd(barcodeConf,"d4","d4s","d4c");
		if(bmsg4==null) {
			bmsg4="";
		}
		String bmsg5 =getZd(barcodeConf,"d5","d5s","d5c");
		if(bmsg5==null) {
			bmsg5="";
		}
		String bmsg6 =getZd(barcodeConf,"d6","d6s","d6c");
		if(bmsg6==null) {
			bmsg6="";
		}
		
		
		String bmsg=bmsg1+bmsg2+bmsg3+bmsg5+bmsg6;
		int xl=barcodeConf.getInt("cd")-bmsg.length();//
		
	
		//int ddsl = Integer.parseInt((String) jc.get("ddsl"));// 订单数
		int ddsl =this.getParaToInt("ddsl");
		String tompath = this.getSession().getServletContext().getRealPath("/");
		String filpath = "tmgl/barcode/imag/";
		System.out.println(tompath+filpath);		
		List<String> fpath =new ArrayList<>(ddsl*2);
		
		String fontname = "黑体";
		Font gfont = new Font(fontname, Font.PLAIN, 3);
		Font tfont = new Font(fontname, Font.BOLD, 3);
		try {
			// 获得条形码文件
			for(int i=0;i<ddsl;i++) {
				System.out.println(bmsg);
				File file = BarcodeUtil.getGenerate(bmsg+getXlm(xl, i+1), tmsg,tompath+filpath, gfont, tfont,  height,whide);//得到图片	
				fpath.add(new String("../tmgl/barcode/imag/"+file.getName()));
				fpath.add(new String("../tmgl/barcode/imag/"+file.getName()));
				System.out.println("path= "+fpath);//图片地址
			}			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		Iterator<String> ite=fpath.iterator();
		
		int clum=2;
//		int row = ddsl / clum;//行
//		int out = ddsl % clum;//列
		
		setAttr("clum",clum);
		setAttr("row", ddsl);
//		setAttr("out", out);
		setAttr("path", ite);
		render(path + "print.jsp");
	 }
	/**
	 * 打印
	 */
	public void print() {
		String dd=getPara("id");
		int whide=Integer.parseInt(getPara("whide"));
		int height=Integer.parseInt(getPara("height"));
		String tmfs=getPara("cpjcjd.mc");
		BarcodeConf barcodeConf=BarcodeConf.dao.findFirst("select * from barcodeconf where mc=?",tmfs);//获取打印方式信息
		String tmsg=getZd(barcodeConf,"t1","t1s","t1c");
		String bmsg1 =getZd(barcodeConf,"d1","d1s","d1c");
		if(bmsg1==null) {
			bmsg1="";
		}
		String bmsg2 =getZd(barcodeConf,"d2","d2s","d2c");
		if(bmsg2==null) {
			bmsg2="";
		}
		String bmsg3 =getZd(barcodeConf,"d3","d3s","d3c");
		if(bmsg3==null) {
			bmsg3="";
		}
		String bmsg4 =getZd(barcodeConf,"d4","d4s","d4c");
		if(bmsg4==null) {
			bmsg4="";
		}
		String bmsg5 =getZd(barcodeConf,"d5","d5s","d5c");
		if(bmsg5==null) {
			bmsg5="";
		}
		String bmsg6 =getZd(barcodeConf,"d6","d6s","d6c");
		if(bmsg6==null) {
			bmsg6="";
		}
		
		
		String bmsg=bmsg1+bmsg2+bmsg3+bmsg5+bmsg6;
		int xl=barcodeConf.getInt("cd")-bmsg.length();//
		
		JcxxIndent jc = JcxxIndent.dao.findFirst("select wl,ddsl from jcxxindent where id=? ", dd);
		int ddsl = Integer.parseInt((String) jc.get("ddsl"));// 订单数
	
		String tompath = this.getSession().getServletContext().getRealPath("/");
		String filpath = "tmgl/barcode/imag/";
		System.out.println(tompath+filpath);		
		List<String> fpath =new ArrayList<>(ddsl*2);
		
		String fontname = "黑体";
		Font gfont = new Font(fontname, Font.PLAIN, 3);
		Font tfont = new Font(fontname, Font.BOLD, 3);
		try {
			// 获得条形码文件
			for(int i=0;i<ddsl;i++) {
				System.out.println(bmsg);
				File file = BarcodeUtil.getGenerate(bmsg+getXlm(xl, i+1), tmsg,tompath+filpath, gfont, tfont,  height,whide);//得到图片	
				fpath.add(new String("../tmgl/barcode/imag/"+file.getName()));
				fpath.add(new String("../tmgl/barcode/imag/"+file.getName()));
				System.out.println("path= "+fpath);//图片地址
			}			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		Iterator<String> ite=fpath.iterator();
		
		int clum=2;
//		int row = ddsl / clum;//行
//		int out = ddsl % clum;//列
		
		setAttr("clum",clum);
		setAttr("row", ddsl);
//		setAttr("out", out);
		setAttr("path", ite);
		render(path + "print.jsp");
	 }
	/**得到字段信息
	 * @param barcodeConf
	 * @return
	 */
	public String getZd(BarcodeConf barcodeConf,String zdm,String zdms,String zdmc) {
		String zd="";
		try {
		 zd=barcodeConf.getStr(zdm);	
		int s=Integer.parseInt(barcodeConf.getStr(zdms));
		int c=Integer.parseInt(barcodeConf.getStr(zdmc));	
		String str= getMethed(zd,s,c);
		return str;
		}catch (Exception e) {
			/*toDwzJson(300, "该物料无图号！", navTabId);*/
		}		
		return zd;
	}
	/**
	 * 通过配置字段使用方法
	 * @param msg
	 * @param s
	 * @param c
	 * @return
	 */
	public String getMethed(String msg ,int s,int c) {
		if( msg.equals("企业编号")) {
			return getQybm();
		}
		if( msg.equals("自定义")) {
			return getZdy();
		}
		if( msg.equals("规格图号")) {
			return getWlth(msg, s, c);
		}
		if( msg.equals("当天日期")) {
			return getDateFormat();
		}
		if(msg.equals("铁道部规定码")) {
			return getQybm();
		}
		if(msg.equals("物料号")) {
			return getQybm();
		}
		return "";
		
	}

	/**
	 * 配置打印 
	 * @throws UnsupportedEncodingException
	 */	
	public void confprint() throws UnsupportedEncodingException {
		setAttr("id", getPara());
		setAttr("jcxxindent", JcxxIndent.dao.findById(getParaToInt()));
		render(path + "confprint.jsp");
	}

	/**
	 * 导出Excel
	 * 
	 * @throws UnsupportedEncodingException
	 */
	public void export() throws UnsupportedEncodingException {
		List<JcxxIndent> data = getPageData().getList();
		String[] columns = { "dd", "wl", "ddlx", "ddsl", "jbksrq", "jbwcrq", "xtzt", "wlms" };
		String[] heades = { "订单", "物料", "订单类型", "订单数量", "基本开始日期", "基本完成日期", "系统状态", "物料描述" };
		String filename = new String("订单抬头.xls".getBytes("UTF-8"), "ISO8859-1");
		render(PoiRender.me(data).fileName(filename).sheetName("所有").columns(columns).headers(heades).cellWidth(5000)
				.headerRow(1));
	}
	/**
	 * 企业代码
	 * @return
	 */
	private String getQybm() {
		return "159732";
	}
	/**
	 * 自定义码
	 * @return
	 */
	private String getZdy() {
//		return getPara("zdy");
		return "G";
	}
	/**
	 * 日期格式
	 * @return
	 */
	private String getDateFormat() {
		SimpleDateFormat format = new SimpleDateFormat("yyMMdd");
		return format.format(new Date());
	}
	/**
	 * 序列码
	 * @return
	 */
	private String getXlm(int len,int tail) {
		return String.format("%0"+len+"d", tail);		
	}
	/**
	 * 规格图号
	 * @param wlh
	 * @param ds
	 * @param dc
	 * @return
	 */
	private String getWlth(String wlh,int ds,int dc) {
		String  sql="select wlth from material where wlh=?";
		try {
		Material material=Material.dao.findFirst(sql,wlh);
		return material.getStr("wlth");
		}catch (Exception e) {
		
		}
		return "";
	}
	
}
